import { nrVary } from "./nrVary";
import { nrGlobal } from "./nrGlobal";
import { nrFunction } from "./nrFunction";

// ag-grid
var nrGrid = {

    /**
     * ÊûÑÂª∫ grid dom
     * @param {any} dom
     */
    buildDom: (dom) => {
        dom = dom || document.createElement("div");
        dom.innerHTML = "";
        dom.classList.add("nr-grid");
        var themeClass = nrVary.flagGridTheme;
        if (nrGlobal.isDark()) {
            themeClass += '-dark';
        }
        dom.classList.add(themeClass);
        return dom;
    },

    /**
     * ÊòæÁ§∫ grid
     * @param {any} domGrid 
     * @param {any} gridOptions 
     */
    viewGrid: async (domGrid, gridOptions) => {
        var agGrid = await nrGlobal.getPackage("agGrid");
        domGrid.innerHTML = "";
        var gridOps = new agGrid.Grid(domGrid, gridOptions).gridOptions;
        return gridOps;
    },

    /**
     * Â≠óÂÖ∏Âàó
     * @param {any} column 
     * @param {any} valueText 
     * @returns 
     */
    newColumnSet: (column, valueText) => Object.assign({
        cellRenderer: params => {
            var item = valueText.filter(x => x.value == params.value)[0];
            return item ? item.text : params.value;
        },
        filter: 'agSetColumnFilter', filterParams: {
            buttons: ['apply', 'reset'], values: valueText.map(x => x.value),
            cellRenderer: (params) => {
                var item = valueText.filter(x => x.value == params.value)[0];
                return item ? `${item.text} (${item.value})` : params.value;
            }
        }, cellEditor: 'agRichSelectCellEditor', cellEditorParams: {
            values: valueText.map(x => x.value),
            cellHeight: nrVary.flagGridRowHeight,
            formatValue: value => valueText.filter(x => x.value == value)[0].text,
        }
    }, column),

    /**
     * Êó•ÊúüÂàó
     * @param {any} column
     */
    newColumnDate: (column) => Object.assign({
        filter: 'agDateColumnFilter', filterParams: { buttons: ['apply', 'reset'] }, width: 200,
        valueFormatter: nrGrid.formatterDateTime
    }, column),

    /**
     * Êï∞Â≠óÂàó
     * @param {any} column
     */
    newColumnNumber: (column) => Object.assign({
        filter: 'agNumberColumnFilter', filterParams: { buttons: ['apply', 'reset'] }
    }, column),

    /**
     * Ë°åÂè∑
     * @param {any} ops
     * @returns
     */
    newColumnLineNumber: ops => Object.assign({
        field: "#line_number", headerName: "üÜî", valueGetter: "node.rowIndex + 1", width: 100, maxWidth: 180,
        checkboxSelection: true, headerCheckboxSelection: true,
        headerCheckboxSelectionFilteredOnly: true, //‰ªÖÂÖ®ÈÄâËøáÊª§ÁöÑÊï∞ÊçÆË°å
        sortable: false, filter: false, menuTabs: false
    }, ops),

    /**
     * Ê∞¥Âπ≥Êü±Áä∂ÂõæÁôæÂàÜÊØî
     * @param {any} ops
     * @returns
     */
    newColumnChartBar: (ops) => Object.assign({
        cellRenderer: 'agSparklineCellRenderer',
        cellRendererParams: {
            sparklineOptions: {
                type: 'bar',
                label: {
                    enabled: true,
                    color: nrFunction.cssvar(document.body, '--global-color'),
                    fontSize: 12,
                    placement: "insideBase",
                    formatter: (params) => `${params.value}%`,
                },
                paddingOuter: 0,
                padding: {
                    top: 0,
                    bottom: 0,
                },
                valueAxisDomain: [0, 100],
                axis: {
                    strokeWidth: 0,
                },
                formatter: (params) => {
                    const { yValue } = params;
                    var ctype = yValue < 50 ? "success" : yValue < 80 ? "warning" : "danger";
                    return {
                        fill: nrFunction.cssvar(document.body, `--sl-color-${ctype}-300`)
                    };
                }
            },
        }
    }, ops),

    /**
     * ÈªòËÆ§ÂàóÂ±ûÊÄß
     * @param {any} colDef
     */
    defaultColDef: colDef => Object.assign({
        //ÈªòËÆ§Â±ûÊÄß
        width: 180, minWidth: 100, maxWidth: 4000, sortable: true, resizable: true,
        //ÈªòËÆ§ÊñáÊú¨ËøáÊª§
        filter: 'agTextColumnFilter', filterParams: { buttons: ['apply', 'reset'] },
        //ÈªòËÆ§ËèúÂçïÈ°π
        menuTabs: ['generalMenuTab', 'filterMenuTab', 'columnsMenuTab']
    }, colDef),

    /**
     * ÈªòËÆ§ÂàÜÁªÑÂ±ûÊÄß
     * @param {any} ops
     */
    autoGroupColumnDef: ops => Object.assign({
        width: 300, maxWidth: 4000
    }, ops),

    /**
     * Ëé∑Âèñ icon
     * @param {any} icon
     */
    iconGrid: icon => `<span class="ag-icon ag-icon-${icon}"></span>`,

    /**
     * grid ÈÖçÁΩÆ
     */
    gridOptions: () => {
        return {
            localeText: nrGrid.localeText, //ËØ≠Ë®Ä
            defaultColDef: nrGrid.defaultColDef(), //ÈªòËÆ§ÂàóÂ±ûÊÄß
            autoGroupColumnDef: nrGrid.autoGroupColumnDef(), //ÈªòËÆ§ÂàÜÁªÑ
            suppressMoveWhenRowDragging: true, //ÊäëÂà∂ÊãñÊãΩÂÆûÊó∂ÁßªÂä®
            suppressRowClickSelection: false, //ÊäëÂà∂ÁÇπÂáªË°åÈÄâ‰∏≠
            suppressFieldDotNotation: true, //ÊäëÂà∂Â≠óÊÆµ key ÁÇπ . Ëß£Êûê
            enableBrowserTooltips: true, //ÊèêÁ§∫
            enableRangeSelection: true, //ËåÉÂõ¥ÈÄâÊã©
            rowGroupPanelShow: 'always', //ÂêØÁî®ÂàóÊãñÊãΩÂàÜÁªÑ 'never', 'always', 'onlyWhenGrouping'
            rowSelection: 'multiple', //Â§öÈÄâ
            //getRowId: event => event.data.data_id, //‰∏ªÈîÆÂàó
            columnDefs: [], //ÂàóÈÖçÁΩÆ
            autoSizePadding: 40, //Ëá™Âä®Ë∞ÉÊï¥ÂàóÂÆΩËøΩÂä†ÂÄºÔºàÊ†áÈ¢òÂä®ÊÄÅÂõæÊ†á„ÄÅÊéíÂ∫èÊ†áËÆ∞Á≠âÔºâ
            headerHeight: nrVary.flagGridRowHeight, //Ë°®Â§¥È´òÂ∫¶
            rowHeight: nrVary.flagGridRowHeight, //Ë°åÈ´òÂ∫¶
            pagination: true, //ÂàÜÈ°µ
            paginationPageSize: nrVary.flagGridPageSize, //ÂçïÈ°µÊï∞Èáè
            cacheBlockSize: nrVary.flagGridPageSize, //Âä†ËΩΩÊï∞Èáè
            animateRows: true, //Âä®Áîª
            isRowSelectable: rowNode => rowNode.group !== true, //ÈùûÂàÜÁªÑÊòæÁ§∫Â§çÈÄâÊ°Ü        
            onSortChanged: event => event.api.refreshCells(), //ÊéíÂ∫èÂêéÂà∑Êñ∞ÔºàÊõ¥Êñ∞Ë°åÂè∑Ôºâ        
            onFilterChanged: event => event.api.refreshCells(), //ËøáÊª§ÂêéÂà∑Êñ∞ÔºàÊõ¥Êñ∞Ë°åÂè∑Ôºâ
            onRowGroupOpened: event => event.api.refreshCells(), //ÁªÑÂ±ïÂºÄÂêéÂà∑Êñ∞ÔºàÊõ¥Êñ∞Ë°åÂè∑Ôºâ
            //Âè≥ÈîÆËèúÂçï
            getContextMenuItems: (params) => {
                let domGrid = nrGrid.getContainer(params).firstElementChild;
                let isFullscreen = domGrid.classList.contains("nr-fullscreen");

                let result = [
                    {
                        name: "ÊâìÂºÄÈìæÊé•", icon: nrGrid.iconGrid('linked'), disabled: params.node.data == null,
                        action: async function () {
                            if (params.node.data) {
                                window.open(params.node.data.ahref)
                            }
                        }
                    },
                    'separator',
                    'copy',
                    'copyWithHeaders',
                    {
                        name: "Â§çÂà∂ÊñáÊú¨", icon: nrGrid.iconGrid('copy'), action: async function () {
                            var cranges = params.api.getCellRanges()[0];
                            var rows = [], rowNodes = [];
                            for (let rowIndex = cranges.startRow.rowIndex; rowIndex <= cranges.endRow.rowIndex; rowIndex++) {
                                var rowNode = params.api.getDisplayedRowAtIndex(rowIndex);
                                var cols = [];
                                cranges.columns.forEach(column => {
                                    var content = rowNode.data[column.colId];
                                    Object.assign(params, { column, data: rowNode.data, value: content });
                                    if (typeof column.colDef.valueFormatter == "function") {
                                        content = column.colDef.valueFormatter(params)
                                    } else if (typeof column.colDef.cellRenderer == "function") {
                                        content = column.colDef.cellRenderer(params)
                                    }
                                    cols.push(content);
                                });
                                rowNodes.push(rowNode);
                                rows.push(cols.join('\t'));
                            }
                            await nrFunction.clipboard(rows.join('\r\n')); //Â§çÂà∂
                            params.api.flashCells({ rowNodes, columns: cranges.columns.map(x => x.colId) }); //Èó™ÁÉÅ

                        }
                    },
                    'separator',
                    {
                        name: isFullscreen ? "ÂèñÊ∂àÂÖ®Â±è" : "ÂÖ®Â±èÊòæÁ§∫", icon: nrGrid.iconGrid(isFullscreen ? 'minimize' : 'maximize'), action: function () {
                            domGrid.classList.toggle("nr-fullscreen");
                        }
                    },
                    'autoSizeAll',
                    'resetColumns',
                    'export'
                ];

                return result;
            },
        }
    },

    /**
     * grid ÊúçÂä°Á´ØÊ®°ÂºèÈÖçÁΩÆ
     * @param {any} options
     * @param {any} apiPath Êé•Âè£
     * @param {any} argsObj 
     * @param {any} faillCallback Â§±Ë¥•ÂõûË∞É
     * @returns 
     */
    gridOptionsServer: async (options, apiPath, argsObj, faillCallback) => {
        let gridOps = Object.assign(nrGrid.gridOptions(), {
            rowModelType: 'infinite', //Êó†ÈôêË°åÊ®°Âºè
            //Êï∞ÊçÆÊ∫ê
            datasource: {
                getRows: async params => {
                    var kvObj = { paramsJson: JSON.stringify(params) }
                    Object.assign(kvObj, argsObj);

                    var url = `${nrVary.apiHost}${apiPath}?${nrFunction.toQueryString(kvObj)}`;
                    var res = await nrGlobal.reqServer(url);

                    if (res.code == 200) {
                        params.successCallback(res.data.RowsThisBlock, res.data.LastRow)
                    } else {
                        params.failCallback();

                        if (faillCallback) {
                            await faillCallback(res);
                        }
                    }
                }
            },
        });
        gridOps = Object.assign(gridOps, options);
        return gridOps;
    },

    /**
     * grid ÂÆ¢Êà∑Á´ØÊ®°ÂºèÈÖçÁΩÆ
     * @param {any} options
     */
    gridOptionsClient: (options) => {
        let gridOps = Object.assign(nrGrid.gridOptions(), {
            pagination: false
        });
        gridOps = Object.assign(gridOps, options);
        return gridOps;
    },

    /**
     * ËøáÊª§Âô®
     * @param {any} type 
     * @param {any} ops 
     * @returns 
     */
    filterParamsDef: (type, ops) => {
        switch (type) {
            case "Number":
                return { filters: [{ filter: `ag${type}ColumnFilter` }, { filter: 'agSetColumnFilter', }] }
            case "Date":
                return {
                    filters: [
                        {
                            filter: 'agDateColumnFilter',
                            filterParams: {
                                comparator: function (filterDate, cellValue) {
                                    if (cellValue == null || cellValue == "") return -1;

                                    //‰ªÖÊØîËæÉÊó•Êúü
                                    var cellDate = new Date(cellValue);
                                    cellDate = new Date(Number(cellDate.getFullYear()), Number(cellDate.getMonth()) - 1, Number(cellDate.getDate()));
                                    filterDate = new Date(Number(filterDate.getFullYear()), Number(filterDate.getMonth()) - 1, Number(filterDate.getDate()));

                                    if (filterDate.getTime() == cellDate.getTime()) {
                                        return 0;
                                    }
                                    if (cellDate < filterDate) {
                                        return -1;
                                    }
                                    if (cellDate > filterDate) {
                                        return 1;
                                    }
                                }
                            },
                        },
                        {
                            filter: 'agSetColumnFilter',
                            filterParams: { comparator: (a, b) => a = b },
                        },
                    ],
                };
        }
        return ops;
    },

    /**
     * Ëé∑ÂèñÊâÄÊúâË°å
     * @param {any} gridOps 
     * @param {any} isLeaf 
     * @returns 
     */
    getAllRows: function (gridOps, isLeaf = true) {
        let rowData = [];
        if (isLeaf) {
            gridOps.api.forEachLeafNode(node => rowData.push(node.data));
        } else {
            gridOps.api.forEachNode(node => rowData.push(node.data));
        }
        return rowData;
    },

    /**
     * Ëé∑ÂèñÈÄâ‰∏≠ÊàñËåÉÂõ¥ÁöÑË°å
     * @param {any} gridOps 
     * @returns 
     */
    getSelectedOrRangeRow: function (gridOps) {
        var srows = gridOps.api.getSelectedRows(), crows = gridOps.api.getCellRanges();
        if (srows.length > 0) {
            return srows[0]
        } else if (crows.length > 0) {
            return gridOps.api.getDisplayedRowAtIndex(crows[0].startRow.rowIndex).data
        }
    },

    /**
     * Ëé∑ÂèñÂÆπÂô®
     * @param {any} event 
     * @returns 
     */
    getContainer: event => event.api.gridOptionsWrapper.eGridDiv,

    /**
     * ËÆæÁΩÆÂä†ËΩΩÁä∂ÊÄÅ
     * @param {any} gridOps 
     * @param {any} isHide 
     */
    setGridLoading: function (gridOps, isHide) {
        if (gridOps && gridOps.api) {
            switch (isHide) {
                case 1:
                    gridOps.api.hideOverlay();
                    break;
                case 2:
                    gridOps.api.hideOverlay();
                    gridOps.api.showNoRowsOverlay();
                    break;
                default:
                    gridOps.api.showLoadingOverlay();
            }
        }
    },

    /**
     * Ê†ºÂºèÂåñÊó∂Èó¥
     * @param {any} params 
     * @returns 
     */
    formatterDateTime: (params) => {
        if (params.value != null) {
            return nrFunction.formatDateTime('datetime', params.value);
        }
    },

    /**
     * ËØ≠Ë®ÄÂåÖ
     */
    localeText: {
        // Set Filter
        selectAll: 'ÔºàÂÖ®ÈÉ®Ôºâ',
        selectAllSearchResults: 'ÔºàÂÖ®ÈÉ®ÊêúÁ¥¢ÁªìÊûúÔºâ',
        searchOoo: 'ÊêúÁ¥¢...',
        blanks: 'ÔºàÁ©∫Ôºâ',
        noMatches: 'Êú™ÊâæÂà∞',

        // Number Filter & Text Filter
        filterOoo: 'ÊêúÁ¥¢...',
        equals: 'Á≠â‰∫é',
        notEqual: '‰∏çÁ≠â‰∫é',
        blank: 'Á©∫',
        notBlank: 'ÈùûÁ©∫',
        empty: 'ÈÄâÊã©‰∏ÄÈ°π',

        // Number Filter
        lessThan: 'Â∞è‰∫é',
        greaterThan: 'Â§ß‰∫é',
        lessThanOrEqual: 'Â∞è‰∫éÁ≠â‰∫é',
        greaterThanOrEqual: 'Â§ß‰∫éÁ≠â‰∫é',
        inRange: 'ËåÉÂõ¥',
        inRangeStart: 'ÂºÄÂßãÂÄº',
        inRangeEnd: 'ÁªìÊùüÂÄº',

        // Text Filter
        contains: 'ÂåÖÂê´',
        notContains: '‰∏çÂåÖÂê´',
        startsWith: 'ÂºÄÂßãÂåÖÂê´',
        endsWith: 'ÁªìÂ∞æÂåÖÂê´',

        // Date Filter
        dateFormatOoo: 'yyyy-mm-dd',

        // Filter Conditions
        andCondition: 'Âíå',
        orCondition: 'Êàñ',

        // Filter Buttons
        applyFilter: 'Á°ÆÂÆö',
        resetFilter: 'ÈáçÁΩÆ',
        clearFilter: 'Ê∏ÖÈô§',
        cancelFilter: 'ÂèñÊ∂à',

        // Filter Titles
        textFilter: 'ÊñáÊú¨ÊêúÁ¥¢',
        numberFilter: 'Êï∞Â≠óÊêúÁ¥¢',
        dateFilter: 'Êó•ÊúüÊêúÁ¥¢',
        setFilter: 'È°πÊêúÁ¥¢',

        // Side Bar
        columns: 'Âàó',
        filters: 'ÊêúÁ¥¢',

        // columns tool panel
        pivotMode: 'Êû¢ËΩ¥Ê®°Âºè',
        groups: 'Ë°åÁªÑ',
        rowGroupColumnsEmptyMessage: 'ÊãñÊãΩÂàóÂà∞Ê≠§Â§ÑËøõË°åÂàÜÁªÑ',
        values: 'ÂÄº',
        valueColumnsEmptyMessage: 'ÊãñÊãΩÂà∞Ê≠§Â§ÑÂêàËÆ°',
        pivots: 'ÂàóÊ†áÁ≠æ',
        pivotColumnsEmptyMessage: 'ÊãñÊãΩÂà∞Ê≠§Â§ÑËÆæÁΩÆÂàóÊ†áÁ≠æ',

        // Header of the Default Group Column
        group: 'ÂàÜÁªÑ',
        // Row Drag
        rowDragRows: 'Ë°å',

        // Other
        loadingOoo: 'Âä†ËΩΩ‰∏≠...',
        noRowsToShow: 'ÔºàÁ©∫Ôºâ',
        enabled: 'ÂêØÁî®',

        // Menu
        pinColumn: 'Âõ∫ÂÆöÂàó',
        pinLeft: 'Â∑¶Âõ∫ÂÆö',
        pinRight: 'Âè≥Âõ∫ÂÆö',
        noPin: 'ÂèñÊ∂àÂõ∫ÂÆö',
        valueAggregation: 'ÂêàËÆ°',
        autosizeThiscolumn: 'ÂΩìÂâçÂàóÂ§ßÂ∞èËá™ÈÄÇÂ∫î',
        autosizeAllColumns: 'ÊâÄÊúâÂàóÂ§ßÂ∞èËá™ÈÄÇÂ∫î',
        groupBy: 'ÂàÜÁªÑ',
        ungroupBy: '‰∏çÂàÜÁªÑ',
        addToValues: 'Ê∑ªÂä†ÂÄº ${variable}',
        removeFromValues: 'ÁßªÈô§ÂÄº ${variable}',
        addToLabels: 'Ê∑ªÂä†Âà∞Ê†áÁ≠æ ${variable}',
        removeFromLabels: 'ÁßªÈô§Ê†áÁ≠æ ${variable}',
        resetColumns: 'ÈáçÁΩÆÂàó',
        expandAll: 'Â±ïÂºÄÂÖ®ÈÉ®',
        collapseAll: 'ÊäòÂè†ÂÖ®ÈÉ®',
        copy: 'Â§çÂà∂',
        ctrlC: 'Ctrl+C',
        copyWithHeaders: 'Â§çÂà∂ÔºàÂ∏¶Ê†áÈ¢òÔºâ',
        copyWithHeaderGroups: 'Â§çÂà∂ÔºàÂ∏¶ÂàÜÁªÑÔºâ',
        paste: 'Á≤òË¥¥',
        ctrlV: 'Ctrl+V',
        export: 'ÂØºÂá∫',
        csvExport: 'CSV ÂØºÂá∫',
        excelExport: 'Excel ÂØºÂá∫',

        // Enterprise Menu Aggregation and Status Bar
        sum: 'Ê±ÇÂíå',
        min: 'ÊúÄÂ∞è',
        max: 'ÊúÄÂ§ß',
        none: 'Êó†',
        count: 'ÊÄªÊï∞',
        avg: 'Âπ≥Âùá',
        filteredRows: 'ËøáÊª§Ë°å',
        selectedRows: 'ÈÄâ‰∏≠',
        totalRows: 'ÊÄªË°å',
        totalAndFilteredRows: 'ÊêúÁ¥¢',
        more: 'Êõ¥Â§ö',
        to: '-',
        of: 'ÔºåÂÖ±',
        page: 'ÂΩìÂâç',
        nextPage: '‰∏ã‰∏ÄÈ°µ',
        lastPage: 'Â∞æÈ°µ',
        firstPage: 'È¶ñÈ°µ',
        previousPage: '‰∏ä‰∏ÄÈ°µ',
        // Pivoting
        pivotColumnGroupTotals: 'ÊÄª',

        // Enterprise Menu (Charts)
        pivotChartAndPivotMode: 'ÂõæË°®Êû¢ËΩ¥ & Êû¢ËΩ¥Ê®°Âºè',
        pivotChart: 'ÂõæË°®Êû¢ËΩ¥',
        chartRange: 'ËåÉÂõ¥ÂõæË°®',

        columnChart: 'Êü±Áä∂Âõæ',
        groupedColumn: 'ÂàÜÁªÑ',
        stackedColumn: 'Â†ÜÂè†Êü±ÂΩ¢Âõæ',
        normalizedColumn: '100% Â†ÜÂè†Êü±ÂΩ¢Âõæ',

        barChart: 'Êù°ÂΩ¢Âõæ',
        groupedBar: 'ÂàÜÁªÑ',
        stackedBar: 'Â†ÜÂè†Êü±ÂΩ¢Âõæ',
        normalizedBar: '100% Â†ÜÂè†Êü±ÂΩ¢Âõæ',

        pieChart: 'È•ºÂΩ¢Âõæ',
        pie: 'È•ºÂõæ',
        doughnut: 'ÁéØÂΩ¢Âõæ',

        line: 'Á∫øÂõæ',

        xyChart: 'Êï£ÁÇπÂõæÂèäÊ∞îÊ≥°Âõæ',
        scatter: 'Êï£ÁÇπÂõæ',
        bubble: 'Ê∞îÊ≥°Âõæ',

        areaChart: 'Èù¢ÁßØÂõæ',
        area: 'Èù¢ÁßØ',
        stackedArea: 'Âè†Â†Ü',
        normalizedArea: '100% Âè†Â†Ü',

        histogramChart: 'Áõ¥ÊñπÂõæ',

        // Charts
        pivotChartTitle: 'ÂõæË°®Êû¢ËΩ¥',
        rangeChartTitle: 'ËåÉÂõ¥ÂõæË°®',
        settings: 'ËÆæÁΩÆ',
        data: 'Êï∞ÊçÆ',
        format: 'Ê†ºÂºè',
        categories: 'Á±ªÂà´',
        defaultCategory: '(Êó†)',
        series: 'Á≥ªÊï∞',
        xyValues: 'X Y ÂÄº',
        paired: 'ÈÖçÂØπÊ®°Âºè',
        axis: 'ËΩ¥',
        navigator: 'ÂØºËà™',
        color: 'È¢úËâ≤',
        thickness: 'ÂùêÊ†áÂÆΩÂ∫¶',
        xType: 'X Type',
        automatic: 'Automatic',
        category: 'Á±ªÂà´',
        number: 'Êï∞Â≠ó',
        time: 'Êó∂Èó¥',
        xRotation: 'X ÊóãËΩ¨',
        yRotation: 'Y ÊóãËΩ¨',
        ticks: 'Ticks',
        width: 'ÂÆΩ',
        height: 'È´ò',
        length: 'Èïø',
        padding: 'Â°´ÂÖÖ',
        spacing: 'Èó¥Ë∑ù',
        chart: 'ÂõæË°®',
        title: 'Ê†áÈ¢ò',
        titlePlaceholder: 'ÂõæË°®Ê†áÈ¢ò - ÂèåÂáªÁºñËæë',
        background: 'ËÉåÊôØ',
        font: 'Â≠ó‰Ωì',
        top: '‰∏ä',
        right: 'Âè≥',
        bottom: '‰∏ã',
        left: 'Â∑¶',
        labels: 'Ê†áÁ≠æ',
        size: 'Â§ßÂ∞è',
        minSize: 'ÊúÄÂ∞è',
        maxSize: 'ÊúÄÂ§ß',
        legend: 'ÊåáÊ†áÈ°π',
        position: '‰ΩçÁΩÆ',
        markerSize: 'Marker Size',
        markerStroke: 'Marker Stroke',
        markerPadding: 'Marker Padding',
        itemSpacing: 'Item Spacing',
        itemPaddingX: 'Item Padding X',
        itemPaddingY: 'Item Padding Y',
        layoutHorizontalSpacing: 'Horizontal Spacing',
        layoutVerticalSpacing: 'Vertical Spacing',
        strokeWidth: 'Á∫øÊù°ÂÆΩÂ∫¶',
        offset: 'Offset',
        offsets: 'Offsets',
        tooltips: 'ÊòæÁ§∫ÊèêÁ§∫',
        callout: 'Callout',
        markers: 'Ê†áÁÇπ',
        shadow: 'Èò¥ÂΩ±',
        blur: 'ÂèëÊï£',
        xOffset: 'X ÂÅèÁßª',
        yOffset: 'Y ÂÅèÁßª',
        lineWidth: 'Á∫øÊù°Á≤óÁªÜ',
        normal: 'Ê≠£Â∏∏',
        bold: 'Âä†Á≤ó',
        italic: 'Êñú‰Ωì',
        boldItalic: 'Âä†Á≤óÊñú‰Ωì',
        predefined: 'Predefined',
        fillOpacity: 'Â°´ÂÖÖÈÄèÊòéÂ∫¶',
        strokeOpacity: 'Á∫øÊù°ÈÄèÊòéÂ∫¶',
        histogramBinCount: 'Bin count',
        columnGroup: 'Êü±Áä∂',
        barGroup: 'Êù°ÂΩ¢',
        pieGroup: 'È•ºÁä∂',
        lineGroup: 'Á∫ø',
        scatterGroup: 'Êï£ÁÇπÂèäÊ∞îÊ≥°',
        areaGroup: 'Èù¢ÁßØ',
        histogramGroup: 'Áõ¥Êñπ',
        groupedColumnTooltip: 'Grouped',
        stackedColumnTooltip: 'Stacked',
        normalizedColumnTooltip: '100% Stacked',
        groupedBarTooltip: 'Grouped',
        stackedBarTooltip: 'Stacked',
        normalizedBarTooltip: '100% Stacked',
        pieTooltip: 'Pie',
        doughnutTooltip: 'Doughnut',
        lineTooltip: 'Line',
        groupedAreaTooltip: 'Area',
        stackedAreaTooltip: 'Stacked',
        normalizedAreaTooltip: '100% Stacked',
        scatterTooltip: 'Scatter',
        bubbleTooltip: 'Bubble',
        histogramTooltip: 'Histogram',
        noDataToChart: 'No data available to be charted.',
        pivotChartRequiresPivotMode: 'Pivot Chart requires Pivot Mode enabled.',
        chartSettingsToolbarTooltip: 'Menu',
        chartLinkToolbarTooltip: 'Linked to Grid',
        chartUnlinkToolbarTooltip: 'Unlinked from Grid',
        chartDownloadToolbarTooltip: 'Download Chart',
    }
}

export { nrGrid }